## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
z<- "test makecache"
print (x)
print (z)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
x<- 1,2,3,4
x<-1
makeCacheMatrix(x)
setwd("~/GitHub/ProgrammingAssignment2")
a<- matrix(1:4, 2 ,2)
a
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
makeCacheMatrixTitle<- "test makecache"
print (makeCacheMatrixTitle)
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
print
}
a<- matrix(1:4, 2 ,2)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
makeCacheMatrixTitle<- "test makecache"
print (makeCacheMatrixTitle)
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
print
}
a<- matrix(1:4, 2 ,2)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
makeCacheMatrixTitle<- "test makecache"
print (makeCacheMatrixTitle)
#     m <- NULL
#     set <- function(y) {
#         x <<- y
#         m <<- NULL
#     }
#     get <- function() x
#     setmean <- function(mean) m <<- mean
#     getmean <- function() m
#     list(set = set, get = get,
#          setmean = setmean,
#          getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
print
}
a<- matrix(1:4, 2 ,2)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
makeCacheMatrixTitle<- "test makecache"
print (makeCacheMatrixTitle)
#     m <- NULL
#     set <- function(y) {
#         x <<- y
#         m <<- NULL
#     }
#     get <- function() x
#     setmean <- function(mean) m <<- mean
#     getmean <- function() m
#     list(set = set, get = get,
#          setmean = setmean,
#          getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
print
}
a<- matrix(1:4, 2 ,2)
a<- matrix(1:4, 2 ,2)
a
makeCacheMatrix(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
makeCacheMatrixTitle<- "test makecache"
print (makeCacheMatrixTitle)
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
print
}
a
makeCacheMatrix(a)
q <- makeCacheMatrix(a)
q
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
makeCacheMatrixTitle<- "test makecache"
print (makeCacheMatrixTitle)
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
print "cacheSolve"
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a<- matrix(1:4, 2 ,2)
q <- cacheSolve(makeCacheMatrix(), a)
q
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
print ("test makecache")
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
print "cacheSolve"
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- inverse(data, ...)
x$setinverse(m)
m
}
a<- matrix(1:4, 2 ,2)
b <- makeCacheMatrix(a)
b
c <- cacheSolve(b)
c
source('~/GitHub/ProgrammingAssignment2/cachematrix.R')
makeCacheMatrix <- function(x = matrix()) {
##    print ("test makecache")
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
##    print "cacheSolve"
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- inverse(data, ...)
x$setinverse(m)
m
}
b <- makeCacheMatrix(a)
b
b$x
b$y
b <- makeCacheMatrix(a)
c <- b(a)
b <- makeCacheMatrix()
b
b(a)
b <- makeCacheMatrix(a)
b$get
print(b$get)
c <- (b$get)
c
c <- (b$get)
c
c$x
b
b$get
b$get()
makeCacheMatrix <- function(x = matrix()) {
##    print ("test makecache")
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
b <- makeCacheMatrix(a)
b$get()
b$getinverse()
b$setinverse()
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
##    print ("test makecache")
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
##    print ("test makecache")
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
b$setinverse()
b <- makeCacheMatrix(a)
b
b$getinverse()
b$setinverse()
?? mean
?? inverse
solve(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
##    print ("test makecache")
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
b$setinverse()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
##    print ("test makecache")
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(x) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
b <- makeCacheMatrix(a)
b$setinverse()
b$getinverse()
b$m
b$setinverse()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
##    print ("test makecache")
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function() m <<- solve(x)
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
b <- makeCacheMatrix(a)
b$setinverse()
b$setinverse()
c <- b$setinverse()
c
c <- b$getinverse()
c
b$setinverse()
b$getinverse()
b <- makeCacheMatrix(a)
b$setinverse()
b$setinverse()
b$getinverse()
c <- b$getinverse()
b <- makeCacheMatrix(a)
b$x
## Put comments here that give an overall description of what your
## functions do
## The makeCacheMatrix function creates an object with  two attributes an d 5 methods
##  attribute x = matrix
##  attributem = invers of matrix
##  Method makeCacheMatrix(matrix)    # inititator
##  method set (matrix)               # set x = matrix m = null
##  method set (matrix)
##  method get()
##  method setinverse()
##  method setinverse()
makeCacheMatrix <- function(y = matrix()) {
##    print ("test makecache")
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function() m <<- solve(x)
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
b <- makeCacheMatrix(a)
b$x
## Put comments here that give an overall description of what your
## functions do
## The makeCacheMatrix function creates an object with  two attributes an d 5 methods
##  attribute x = matrix
##  attributem = invers of matrix
##  Method makeCacheMatrix(matrix)    # inititator
##  method set (matrix)               # set x = matrix m = null
##  method set (matrix)
##  method get()
##  method setinverse()
##  method setinverse()
makeCacheMatrix <- function(y = matrix()) {
x <- y
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function() m <<- solve(x)
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
b <- makeCacheMatrix(a)
b$x
b$setinverse()
f <- makeCacheMatrix()
b <- f(a)
print(b$get())
print b$getinverse()
b$setinverse()
print(b$get())
print b$getinverse()
## Put comments here that give an overall description of what your
## functions do
## The makeCacheMatrix function creates an object with  two attributes an d 5 methods
##  attribute x = matrix
##  attributem = invers of matrix
##  Method makeCacheMatrix(matrix)    # inititator
##  method set (matrix)               # set x = matrix m = null
##  method set (matrix)
##  method get()
##  method setinverse()
##  method setinverse()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function() m <<- solve(x)
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
b <- makeCacheMatrix(x)
print(b$get())
print b$getinverse()
b$setinverse()
print(b$get())
print b$getinverse()
b <- makeCacheMatrix(x)
b$get()
b$getinverse()
b$setinverse()
b$get()
b$getinverse()
b <- makeCacheMatrix(x)
b$set(x)
b$get()
b$getinverse()
b$setinverse()
b$get()
b$getinverse()
b <- makeCacheMatrix(a)
b$get()
b$getinverse()
b$setinverse()
b$get()
b$getinverse()
b$setinverse()
b <- makeCacheMatrix(a)
b$get()
b$getinverse()
b$setinverse()
b$get()
b$getinverse()
